ONGOING ISSUES#
# double-check the generation-as-2-level-factor thing... it was being weird at the end of the summary plots bit#
#
rm(list=ls())#
#
source( "~/Dropbox/DworkinLabSharedMaterial/WRP_FUNCTIONS.R" )#
source( "/Users/Will/Documents/=WORK=/Code_Toolbox/Wingplots/WINGPLOTSOURCE.R" )
SymmMatrix <- function( X, intercept=T ){#
#   this function takes a vector of coefficients from a Lande-style multivariate regression#
#   to estimate the elements of gamma, and outputs gamma: the matrix of quadratic and correlational selection#
#   gradients... where for traits A & B, the model was ( relative.fitness ~ A + B + A^2 + B^2 )#
#   which outputs matrix elements in the order: linear terms, quadratic terms(diag), correlational terms(column-wise off-diags)#
  if (intercept==T){ X <- X[-1] }#
  matrank <- (sqrt( 8*length(X) + 9 ) -3) / 2#
  outmatrix <- matrix( NA, ncol=matrank, nrow=matrank )#
  nonlinears <- X[ -(1:matrank) ]#
  correls <- nonlinears[ -(1:matrank) ]#
  diag( outmatrix ) <- nonlinears[ 1:matrank ]#
  loop <- 0  #
  for (i in 1:(matrank-1) ) {#
    lower <- matrank-i#
    loop <- loop+lower#
    start <- loop-lower+1#
    outmatrix[ (i+1) : matrank , i] <- correls[ start : loop ]#
    outmatrix[ i, (i+1) : matrank ] <- correls[ start : loop ]#
  }#
  outmatrix#
}#
########################################################
VecMag <- function( X ){#
  # straightforward function to return the sum of abs( vector elements ) and |vector| as measures of vector magnitude#
  mag <- sum( abs( X ))#
  PD <- sqrt( t( X ) %*% X )#
  c( sum=mag, procdist=PD )#
}#
########################################################
VecCor <- function(vec1, vec2){#
  # Function to compute vector Correlation#
  vec.cor <- (t(vec1) %*% vec2)/(PD(vec1)*PD(vec2))#
  return(vector.cor=vec.cor)#
  }#
########################################################
BootBeta <- function( which.wings, nitt ){#
  # this is a function that I'll use to generate CI's on magnitudes of selection vectors#
  bootmags <- matrix( NA, ncol=4, nrow=nitt ) ; permmags <- matrix( NA, ncol=4, nrow=nitt )#
  colnames( bootmags ) <- colnames( permmags ) <-c( "S.sum", "S.pd", "beta.sum", "beta.pd" )#
  real.S <- colMeans( which.wings[which.wings$Surv==1, 107:164] ) - colMeans( which.wings[, 107:164] )#
  real.beta <- solve( cov( which.wings[, 107:164] )) %*% real.S#
  boot.fmla <- as.formula( paste("Surv ~ 0+", paste( "PC", 1:58, sep="", collapse="+" )))#
  perm.fmla <- as.formula( paste("which.wings$Surv ~ 0+", paste( "PC", 1:58, sep="", collapse="+" )))#
    for (i in seq(nitt) ){#
      wingsample <- which.wings[ sample( nrow(which.wings), nrow(which.wings), replace=T ) ,]#
      boot.S <- colMeans( wingsample[wingsample$Surv==1, 107:164] ) - colMeans( wingsample[, 107:164] )#
      boot.B <- lm( boot.fmla, data=wingsample )$coef#
#       boot.B <- solve( cov( wingsample[, 107:164] )) %*% boot.S#
      bootmags[i,] <- c( VecMag( boot.S ), VecMag( boot.B ))#
      wingperm <- which.wings[ sample( nrow(which.wings), nrow(which.wings), replace=F ) ,]#
      perm.S <- colMeans( wingperm[which.wings$Surv==1, 107:164] ) - colMeans( wingperm[, 107:164] )#
      perm.B <- lm( perm.fmla, data=wingperm )$coef#
#       perm.B <- solve( cov( wingperm[, 107:164] )) %*% perm.S#
      permmags[i,] <- c( VecMag( perm.S ), VecMag( perm.B ))#
    }#
  Boot.CI <- apply( bootmags, 2, quantile, probs=c( 0.025, 0.975) )#
  Perm.CI <- apply( permmags, 2, quantile, probs=c( 0.025, 0.975) )#
  P.val <- length( permmags[permmags[,4] >= VecMag( real.beta )[2] ,4] ) /nitt#
  list( Boot.Mean=colMeans( bootmags ), Boot.CI=Boot.CI, P.value=P.val, Perm.Mean=colMeans( permmags ), Perm.CI=Perm.CI )#
}#
########################################################
# S vector calculation function#
S.vec <- function( X, Rep, Sel ) {#
  colMeans( X[X$Surv==1 & X$Replicate==Rep & X$Selection.Regime==Sel, 107:164] ) -#
    colMeans( X[X$Replicate==Rep & X$Selection.Regime==Sel, 107:164] )#
}#
########################################################
# Beta vector modelling function#
B.vec <- function( X, Rep, Sel ) {#
  B.fmla <- as.formula( paste("Surv ~ 0+", paste( "PC", 1:58, sep="", collapse="+" )))#
  B.vector <- lm( B.fmla, data=X[X$Replicate==Rep & X$Selection.Regime==Sel,] )$coef#
  B.vector#
}#
########################################################
# 'apply'-able HPDinterval function#
hpd <- function( X ) {#
  HPDinterval( as.mcmc( X ), probs=c(0.025, 0.975) )[1:2]#
}#
########################################################
# Procrustes vector cor function#
ProcVC <- function( A, B ){#
	Arot <- procrustes( as.matrix(A), as.matrix(B), trans=T )$X.new#
	Brot <- procrustes( as.matrix(B), as.matrix(A), trans=T )$X.new#
	mean( VecCor( Arot, B ), VecCor( Brot, A ) )#
}#
########################################################
ProcBootVC <- function( A_rep, A_reg, B_rep, B_reg, nitt, fun=S.vec ) {#
  # this is an alternate function to generate CI's on selection vectors & their correlation#
  Awings <- allwings[allwings$Replicate==A_rep & allwings$Selection.Regime==A_reg,]#
  Bwings <- allwings[allwings$Replicate==B_rep & allwings$Selection.Regime==B_reg,]#
  newwings <- rbind( Awings, Bwings )#
  ABmat <- rep( NA, nitt)#
  for (i in 1:nitt) {#
    bootwings <- newwings[ sample( nrow(newwings), nrow(newwings), replace=T) ,]#
    A <- S.vec( bootwings, A_rep, A_reg )#
    B <- S.vec( bootwings, B_rep, B_reg )#
    Arot <- procrustes( as.matrix(A), as.matrix(B), trans=T )$X.new#
    Brot <- procrustes( as.matrix(B), as.matrix(A), trans=T )$X.new#
    ABmat[i] <- mean( VecCor( Arot, B ), VecCor( Brot, A ) )#
  }#
  hpd( ABmat )#
}#
########################################################
BootMagEvo <- function( pop.wings, nitt, RealMagVal ) {#
	# this function is going to bootstrap CI's on the magnitude of response projected onto direction of Precursor selection...#
	# real precursor selection is P.linear.lda$scaling#
	outmat <- matrix( NA, ncol=2, nrow=nitt )#
	colnames( outmat ) <- c( "magevoH", "magevoN" )#
	N <- nrow( pop.wings )#
	for (i in 1:nitt) {#
		# bootstrap under H1 for the CI...#
		bootwings.H <- pop.wings[ sample( N, N, replace=T ),]#
		bootshape.H <- as.matrix( bootwings.H[,107:164] )#
		bootcoef.H <- lm(bootshape.H ~Generation.Num, data=bootwings.H)$coef#
		bootmag.H <- crossprod( P.linear.lda$scaling, bootcoef.H[2,] ) / PD( P.linear.lda$scaling )#
		# bootstrap under H0 for the null CI...#
		bootwings.N <- pop.wings[ sample( N, N, replace=F ),]#
		# bootshape.N <- as.matrix( bootwings.N[,107:164] )#
		bootcoef.N <- lm(bootshape.H ~Generation.Num, data=bootwings.N)$coef#
		bootmag.N <- crossprod( P.linear.lda$scaling, bootcoef.N[2,] ) / PD( P.linear.lda$scaling )#
		outmat[i,] <- c( bootmag.H, bootmag.N )#
	}#
	P.val <- length( outmat[ outmat[,2] >= RealMagVal ,2] ) /nitt#
	CIs <- apply( outmat, MARGIN=2, FUN=hpd )#
	list( P.val=P.val, confint=CIs )#
}
